 public int NumJewelsInStones(string jewels, string stones) {
        
    Hashtable jHT = new Hashtable();
    int matchedNum = 0;
        
    foreach(char jwl in jewels)
    {
        jHT.Add(jwl, null);
    }
    foreach(char stn in stones)
    {
        if(jHT.ContainsKey(stn))
            matchedNum++;
    }
    return matchedNum;
}


// Kotlin
fun numJewelsInStones(jewels: String, stones: String): Int {
    var count = 0
    for(i in jewels)
    {
        for(j in stones)
        {
            if(i == j)
            {
                count++
            }
        }
    }
    return count
}

//java
public int numJewelsInStones(String jewels, String stones) {
    int count = 0;
    for(int i = 0; i < jewels.length(); i++)
    {
        for(int j = 0; j < stones.length(); j++)
        {
            if(jewels.charAt(i) == stones.charAt(j))
            {
                count++;
            }
        }
    }
    return count;
}

// c++
int numJewelsInStones(std::string jewels, std::string stones) {
    int count = 0;
    for (int i = 0; i < jewels.length(); i++)
    {
        for (int j = 0; j < stones.length(); j++)
        {
            if (jewels[i] == stones[j])
            {
                count++;
            }
        }
    }
    return count;
}
